{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf110
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 Cloud\cf0  \{\
\
	\cf2 var\cf0  <>edgePoints, boundingRect, inside, <>settings, <>dur, <>page, pauseRatio, playRatio,\
		lowPitchRatio, hiPitchRatio, <>high, <>low;\
	\
	\
	*initClass  \{\
	\
		\cf2 SynthDef\cf0 ( \cf3 "sineGrains"\cf0 , \{ \cf2 arg\cf0  out = 0, pan = 0, highfreq = 2000, lowfreq = 200, \
			grainDur = 0.04, gate = 1, density = 5, db = -20;\
\
			\cf2 var\cf0  dust, env, wfreq, freq, mainEnv, sine, panner, amp;\
\
			amp = db.dbamp;\
			mainEnv = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .asr(0.01, 1, 0.01, 1), gate, doneAction:2);\
			dust = \cf2 Dust\cf0 .kr(density);\
			wfreq = \cf2 Dwhite\cf0 (lowfreq, highfreq, \cf2 inf\cf0 );\
			freq = \cf2 Demand\cf0 .kr(dust, 0, wfreq);\
			env = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .sine(grainDur, amp), dust > 0, doneAction: 0); \
			\
			sine = \cf2 SinOsc\cf0 .ar(freq, 0, env * amp);\
			\
			panner = \cf2 Pan2\cf0 .ar(sine, pan, mainEnv);\
			\
			\cf2 Out\cf0 .ar(out, panner);\
			\
		\}).store;		\
	\
	\}\
	\
	\
	*new \{ \cf2 arg\cf0  pointArr, pageSize, duration, hi, lo;\
		^\cf2 super\cf0 .new.init(pointArr, pageSize, duration, hi, lo);\
	\}\
	\
	\
	init \{ \cf2 arg\cf0  pointArr, pageSize, duration, hi, lo;\
	\
		\cf2 var\cf0  minX, minY, maxX, maxY, x, y, count;\
	\
		\cf4 //[pageSize, duration, hi, lo].postln;\cf0 \
	\
	 	edgePoints = pointArr;\
	  \
	  	minX = maxX = pointArr.first.x;\
	  	minY = maxY = pointArr.first.y;\
	  \
	  	edgePoints.do (\{ \cf2 arg\cf0  next;\
	  	\
	  		x = next.x;\
	  		y = next.y;\
	  		\
	  		if (x < minX, \{ minX = x; \},\
	  		\
	  			\{if ( x > maxX, \{ maxX = x;  \}); \});\
\
	  		if (y < minY, \{ minY = y; \},\
	  		\
	  			\{if ( y > maxY, \{ maxY = y;  \}); \});\
	  \
	  	\});\
	  	\
	  	boundingRect = \cf2 Rect\cf0 .fromPoints(\cf2 Point\cf0 (minX, minY), \cf2 Point\cf0  (maxX, maxY));\
	  	\
	  	\cf4 //pauseRatio = pageSize.right  / minX;\cf0 \
	  	\cf4 //playRatio = pageSize.right / (maxX - minX);\cf0 \
	  	dur = duration;\
	  	page = pageSize;\
	  	\
	  	high = hi;\
	  	low = lo;\
	  	\
	  	\
	  	inside = [];\
	  	\
	  	count = minX;\
	  	\{count <= maxX\}. while(\{\
	  	\
	  		inside = inside.add([count, \cf2 this\cf0 .discoverYsForX(count)]);\
	  		count = count + 1;\
	  	\});\
	  	\
	  	settings = \cf2 Conductor\cf0 .make(\{ \cf2 arg\cf0  cond, db, pan, density, grainDur;\
	  	\
	  		\cf2 var\cf0  div, frameDur, lowFreq, highFreq;\
	  	\
		  	db.sp(-20, -100, 20);\
		  	pan.spec_(\cf5 \\pan\cf0 );\
		  	density.sp(5, 0.5, 100);\
	  		grainDur.sp(0.04, 0.001, 1);\
	  		\
	  		\cf4 //cond.synth_((instrument: \\sineGrains));\cf0 \
	  		\
	  		cond.pattern_(\
	  			\cf2 Pbind\cf0 (\
	  			\
	  				\cf5 \\dur\cf0 , \cf2 Prout\cf0 (\{\
	  						"dur".postln;\
	  				\
	  						\cf4 //frameDur = (dur / playRatio) / inside.size;\cf0 \
	  						\cf4 //(dur / playRatio).yield;\cf0 \
	  						((boundingRect.left / (page.right - page.left)) * dur.value).yield;\
	  						inside.size.do(\{\
	  							\cf4 //frameDur.yield;\cf0 \
	  							(dur.value / (page.right - page.left)).yield;\
	  						\});\
	  						\cf4 //(dur / pauseRatio).yield;\cf0 \
	  						\cf4 //(dur / playRatio).yield;\cf0 \
	  					\}), \
	  					\
	  				\cf5 \\highfreq\cf0 , \
	  					\cf2 Prout\cf0 (\{\
\
	  						\cf2 var\cf0  arr, freqRange, loopArr, popped;\
	  							\
							div =1;\
	  							\
	  						"foo".postln;\
	  						[\cf5 \\rest\cf0 , \cf5 \\rest\cf0 ].yield;\
	  							\
	  						inside.do(\{ \cf2 arg\cf0  boundArr;\
	  							\cf4 //boundArr.postln;\cf0 \
	  							arr = boundArr.last.copy;\
	  							\cf4 //arr.postln;\cf0 \
	  							if ((arr.notNil) && (arr.size > 0), \{\
	  								div = arr.size / 2;\
	  							\}, \{ div = 1; \});\
		  						freqRange = high.value - low.value;	  							arr = page.bottom - arr;\
	  							arr = ((arr / page.bottom) * freqRange) + low.value;\
	  							\cf4 //if (arr.size == 1, \{ arr = arr ++ arr; \});\cf0 \
	  							\cf4 //arr.postln;\cf0 \
	  							if( (arr.size % 2) == 1, \{ arr = arr ++ arr.last; \});\
	  							if ( arr.size > 2, \{\
	  								\
	  								highFreq = [];\
	  								lowFreq = [];\
	  								\{arr.size > 0\}. while(\{\
		  								lowFreq = lowFreq.add(arr.pop);\
		  								highFreq = highFreq.add(arr.pop);\
		  							\});\
		  						\}, \{\
		  							lowFreq = arr.pop;\
		  							highFreq = arr.pop;\
		  						\
		  						\});\
	  							//arr.postln;\
	  							//arr.yield;\
	  							highFreq.postln;\
	  							highFreq.yield;\
	  						\});\
	  					\}),\
	  					  				\
	  				\cf5 \\lowfreq, lowFreq,\
	  				\cf0 \
	  				\cf5 \\grainDur\cf0 , grainDur,\
	  				\cf5 \\density\cf0 , \cf2 Pfunc\cf0 (\{density.value / div\}),\
	  				\cf5 \\db\cf0 ,  db,\
	  				\cf5 \\pan\cf0 , pan,\
	  				\
	  				\cf5 \\freq\cf0 , \cf2 Pseq\cf0 ([\cf5 \\rest\cf0 , \cf2 Pseq\cf0 ([440], \cf2 inf\cf0 )], 1), \cf4 // force a rest!\cf0 \
	  				\
	  				\cf5 \\instrument\cf0 , \cf5 \\sineGrains\cf0 \
	  				\
	  			)\
	  		);\
	  	\});\
	  	\
	  \}\
	  \
	getPause \{\
	\
		^((boundingRect.left / page.right) * dur.value);\
	\}\
	  \
	isInside \{ \cf2 arg\cf0  point;\
	  \
	  	\cf2 var\cf0  x, range, y, hi, low, found;\
	  \
	  	if (boundingRect.containsPoint(point), \{\
	  	\
			found = \cf2 false\cf0 ;\
\
	  		x = point.x;\
	  		y = point.y;\
	  		\
	  		range = inside[x - boundingRect.left].last.copy;\
	  		if ( range.notNil, \{\
	  		\
	  			\{range.size > 0\}. while(\{\
	  			\
	  				hi = range.pop;\
	  				\cf4 //["hi ", hi].postln;\cf0 \
	  				low = range.pop;\
	  				if ((hi >= y) && (low <= y), \{\
	  				\
	  					found = \cf2 true\cf0 ;\
	  				\});\
	  			\});\
	  		\});\
	  		\
	  		^found;\
	  	\});\
	  	\
	  	^\cf2 false\cf0 ;\
	\}\
	  \
	getRanges \{ \cf2 arg\cf0  x;\
	\
		\cf2 var\cf0  range;\
	\
		\cf4 //["getRanges ", x].postln;\cf0 \
		if (x >= boundingRect.left && x <= boundingRect.right, \{\
		\
			range = inside[x - boundingRect.left].last.copy;\
		\});\
		\
		^range;\
	\}\
	\
	getFreqs \{ arg x;\
	\
		var range, freqRange;\
		\
		range = this.getRanges(x);\
		\
		freqRange = high.value - low.value;			\
		range = page.bottom - range;\
	  	range = ((range / page.bottom) * freqRange) + low.value;\
\
		\
		^range;\
	\}\
		\
	  \
	discoverYsForX \{ \cf2 arg\cf0  x;\
	\
		\cf2 var\cf0  returnVal, crossings, y, next, slope, yarr;\
		\
		returnVal = [];\
		yarr = [];\
	\
		if (x < boundingRect.left || x > boundingRect.right, \{\
\
			 yarr = \cf2 nil\cf0 ;\
	  	\}, \{\
	  	\
		  		edgePoints.do(\{ \cf2 arg\cf0  point, index;\
		  		\
		  			\cf4 // the next point\cf0 \
		  			next = edgePoints[(index + 1) % edgePoints.size];\
	  		\
	  		\
	  				\cf4 // is our x included in this line segment?\cf0 \
	  				\cf4 //["discoverYsForX next.x", next.x, "x", x].postln;\cf0 \
	  				\
	  				if (((point.x < x) && (next.x >= x)) ||\
	  					((point.x > x) && (next.x <= x)), \{\
	  					\
	  						\cf4 // find the equation for the line described by the two edge points\cf0 \
	  						\
	  						slope = (next.y - point.y) / (next.x - point.x);\
	  						\
	  						\cf4 // line equation:  y - point.y = slope * (x - point.x)\cf0 \
	  						\
	  						\cf4 // if we give our x, find y on the line\cf0 \
	  						\cf4 // then add it to the array\cf0 \
	  						\
	  						yarr = yarr.add((slope * (x - point.x)) + point.y);\
	  						\
	  					\});\
	  				\});\
	  				\
	  				\cf4 // sort the array\cf0 \
	  				yarr = yarr.sort;\
	  				\cf4 // the y cordinates in the array can now be thought of as pairs.\cf0 \
	  				\cf4 // the first one in the pair is the high part of a range\cf0 \
	  				\cf4 // and the second one is the low part of a range\cf0 \
	  				\
	  		\});\
	  		\
	  		\cf4 // if yar is nil, the given x falls outside of our bounding box\cf0 \
	  		\cf4 // if the array is empty, then there are no points within the shape for the given x\cf0 \
	  		\cf4 // otherwise, the array is pairs as described above\cf0 \
	  		\
	  		^yarr;\
	  		\
	  \}\
	  \
	  play \{\
	  \
	  	\cf4 //[(dur.value / pauseRatio), (dur.value / playRatio)].postln;\cf0 \
		"play".postln;\
	  	settings.play;\
	  \}\
	  \
	  pause \{\
	  	settings.pause;\
	  \}\
	  \
	  stop \{\
	  \
	  	settings.stop;\
	  \}\
	  \
\}\
\
\
}